---
alwaysApply: false
description: Recommended extension structure—background, content, options, panel entries.
---

# Decision Record: n8n Extension Structure

## Overall Architecture
Chrome/Edge extension with three main components working together to provide AI-powered n8n workflow assistance.

## Core Components

### 1. Content Script (`src/content/`)
- **Purpose**: Thin injection/mount layer
- **Responsibilities**:
  - Detect n8n editor canvas presence
  - Inject trigger button and mount panel container
  - Keep logic minimal; no platform API calls or business logic
  - Theme reading only; no secrets or API keys

### 2. Background Service Worker (`src/background/`)
- **Purpose**: Platform/API orchestration
- **Responsibilities**:
  - Own Chrome APIs (runtime, storage, messaging)
  - Delegate LLM/n8n calls to services
  - Stream responses via ports (messaging abstraction)
  - No UI logic here

### 3. Panel UI (`src/panel/`)
- **Purpose**: Presentation + container split
- **Responsibilities**:
  - Presentational components: pure UI (e.g., `MessageBubble`, `MessagesList`, `ChatComposer`)
  - Containers: bind services/state to presentational components (e.g., `ChatContainer`)
  - Shared styles via `styles.ts` to avoid large inline style objects

## Communication Flow
```
User Input → Content Script → Background Worker → AI Agents → n8n API
                ↓
Panel UI ← Background Worker ← AI Response ← LLM Provider
```

## Data Flow
1. **User opens panel**: Content script detects n8n, fetches workflow list
2. **User sends message**: Content script → Background worker
3. **AI processing**: Background worker runs agent orchestration
4. **API calls**: Background worker calls n8n API for workflow operations
5. **Response streaming**: Background worker → Panel UI with real-time updates
6. **User confirmation**: Panel UI → Background worker → Apply workflow changes

## File Structure
```
src/
├── background/
│   ├── index.ts              # Service worker entry
│   └── orchestrator.ts       # LangGraph state machine (future)
├── content/
│   ├── inject.ts            # n8n detection and injection
│   ├── panel-mount.ts       # React panel mounting
│   └── theme-integration.ts  # n8n CSS variable reading
├── panel/
│   ├── ChatContainer.tsx    # Container binds store/services to UI
│   ├── components/          # Chat, diffs, credential guides
│   └── styles.ts            # Shared style constants for panel
└── options/
    └── index.html           # Settings page
```

## Security Considerations
- Content script runs in n8n page context (same-origin)
- Background worker handles all external API calls
- Panel UI isolated from n8n page DOM
- No sensitive data stored in content script
- API keys stored securely in extension storage

## Performance Considerations
- Background worker handles heavy AI processing
- Panel UI optimized for real-time streaming
- Content script minimal and lightweight
- Lazy loading of AI agent modules
- Efficient state management with Zustand

## Integration Points
- **n8n Detection**: Content script identifies n8n editor pages
- **Theme Sync**: CSS variables read from n8n and applied to panel
- **API Communication**: Background worker handles all n8n API calls
- **User Experience**: Non-interruptive UI with optional guidance
