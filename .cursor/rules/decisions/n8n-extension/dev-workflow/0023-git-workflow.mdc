---
alwaysApply: true
description: n8n Extension Git Workflow
---

# Decision Record: n8n Extension Git Workflow

## n8n Extension Git Workflow Strategy

### Branch Naming Conventions
```
‚ú®/chat-panel-ui
‚ú®/agent-orchestrator
‚ú®/n8n-api-integration
üêõ/chat-message-persistence
üöÄ/v1.0.0
```

## n8n Extension Commit Standards

### Commit Emojis
- **ü§ñ**: AI instructions, Cursor rules, automation
- **üí≠**: Decisions, brainstorms, planning documentation
- **‚ú®**: New features
- **üêõ**: Bug fixes
- **üìö**: Documentation
- **üé®**: Code style/formatting
- **‚ôªÔ∏è**: Refactoring
- **‚ö°**: Performance improvements
- **üîß**: Configuration changes
- **üß™**: Tests
- **üê≥**: Docker, DevContainer, container related

### Commit Examples
- Use conventional commit format with emojis
- Include scope and clear description
- Reference issues and breaking changes

## Pull Request Process

### PR Requirements
- **Descriptive Title**: Clear, concise title describing the change
- **Detailed Description**: Explain what, why, and how
- **Linked Issues**: Reference related issues with `Fixes #123`
- **Screenshots**: For UI changes, include before/after screenshots
- **Testing**: Describe how the change was tested
- **Breaking Changes**: Document any breaking changes

### PR Template
- Include description, type of change, and related issues
- Document testing and breaking changes
- Provide screenshots for UI changes
- Include comprehensive checklist

### PR Review Process
1. **Self Review**: Author reviews their own PR first
2. **Automated Checks**: CI/CD runs tests and linting
3. **Peer Review**: At least one team member reviews
4. **Approval**: PR requires approval before merging
5. **Merge**: Use "Squash and merge" for feature branches

## Release Process

### Version Numbering
Follow [Semantic Versioning](https://semver.org/):
- **MAJOR**: Breaking changes
- **MINOR**: New features (backward compatible)
- **PATCH**: Bug fixes (backward compatible)

### Release Workflow
1. **Create Release Branch**: `git checkout -b release/v1.0.0`
2. **Update Version**: Update version in `package.json` and `manifest.json`
3. **Update Changelog**: Add release notes to `CHANGELOG.md`
4. **Final Testing**: Comprehensive testing on release branch
5. **Merge to Main**: Merge release branch to `main`
6. **Tag Release**: Create git tag `v1.0.0`
7. **Merge to Develop**: Merge release branch to `develop`
8. **Build Package**: Create extension package for distribution

### Changelog Format
- Use semantic versioning with clear sections
- Document added, changed, and fixed items
- Include release dates and version numbers

## Git Hooks

### Pre-commit Hook
- Run linting, type checking, and tests
- Validate commit message format
- Ensure code quality before commits

### Commit Message Hook
- Validate commit message format
- Enforce conventional commit standards

## Branch Protection Rules

### Main Branch Protection
- **Require PR Reviews**: At least 1 approval required
- **Dismiss Stale Reviews**: Dismiss reviews when new commits are pushed
- **Require Status Checks**: All CI checks must pass
- **Require Up-to-date Branches**: Branch must be up-to-date before merging
- **Restrict Pushes**: No direct pushes to main branch

### Develop Branch Protection
- **Require PR Reviews**: At least 1 approval required
- **Require Status Checks**: All CI checks must pass
- **Allow Force Pushes**: Allow force pushes for rebasing

## Development Workflow

### Feature Development
1. **Create Feature Branch**: `git checkout -b ‚ú®/new-feature`
2. **Develop Feature**: Make commits following conventions
3. **Push Branch**: `git push origin ‚ú®/new-feature`
4. **Create PR**: Open pull request to `develop`
5. **Review & Merge**: After review and approval, merge to `develop`

### Hotfix Process
1. **Create Hotfix Branch**: `git checkout -b üêõ/critical-bug`
2. **Fix Bug**: Make minimal changes to fix the issue
3. **Test Fix**: Ensure fix works and doesn't break anything
4. **Create PR**: Open pull request to `main`
5. **Merge & Tag**: Merge to main and create patch release
6. **Backport**: Merge fix to `develop` branch

### Release Preparation
1. **Create Release Branch**: `git checkout -b üöÄ/v1.0.0`
2. **Final Testing**: Comprehensive testing and bug fixes
3. **Update Documentation**: Ensure all docs are up-to-date
4. **Version Bump**: Update version numbers
5. **Create PR**: Open PR to `main` for final review
6. **Release**: Merge and create release tag

## Git Configuration

### Recommended Git Config
```bash
# Set up user information
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"

# Set up default branch name
git config --global init.defaultBranch main

# Set up pull strategy
git config --global pull.rebase false

# Set up push strategy
git config --global push.default simple

# Set up aliases
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.unstage 'reset HEAD --'
git config --global alias.last 'log -1 HEAD'
git config --global alias.visual '!gitk'
```

## Open Items
- **Automated Release**: Set up automated release process
- **Branch Cleanup**: Automated cleanup of merged branches
- **Commit Signing**: Implement commit signing for security
- **Git LFS**: Consider Git LFS for large files
