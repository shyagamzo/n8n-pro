---
alwaysApply: false
description: Design system evolution after CSS refactoring—token strategy and architecture.
---

# Decision Record: Design System Evolution Post-CSS Refactoring

## Context

After completing the comprehensive CSS refactoring (19 components, 14 CSS files), we discovered that our design system architecture needs to evolve to match our new CSS-first approach.

## Current Situation (After Refactoring)

### What We Have
1. **~~`tokens.ts`~~** - ❌ DELETED (was 260 lines, completely unused)
2. **14 CSS files** - Using n8n's CSS variables directly
3. **1 utilities.css** - Centralized reusable patterns
4. **No inline styles** - Everything moved to CSS

### The Discovery
After CSS refactoring, `tokens.ts` became completely unused:

```typescript
// ❌ NOT USED ANYMORE
export const componentTokens = {
  messageBubble: {
    user: {
      background: colors.chatUserBackground,
      color: colors.chatUserText,
      padding: `${spacing['2xs']} ${spacing.xs}`,
      borderRadius: borders.radiusLarge,
    },
    // ... 50 more lines
  },
}
```

**Before CSS refactoring:**
```typescript
import { componentTokens } from '../styles/tokens'
<div style={componentTokens.messageBubble.user}>
```

**After CSS refactoring:**
```typescript
import './MessageBubble.css'
<div className="message-bubble--user">
```

```css
.message-bubble--user {
    background: var(--color-chat-user-background, #31c4ab);
    color: var(--color-chat-user-color, #ffffff);
    padding: var(--spacing-2xs, 0.5rem) var(--spacing-xs, 0.75rem);
    border-radius: var(--border-radius-large, 0.75rem);
}
```

## Design System Strategy

### Core Principle
**CSS is the source of truth for styling. No TypeScript/JavaScript intermediary layer.**

### Single-Layer Token Architecture

#### Pure CSS Variables
Components use n8n's CSS variables directly in CSS files:

```css
/* ✅ PRIMARY METHOD - Direct usage in CSS */
.component {
    /* Spacing */
    padding: var(--spacing-xs, 0.75rem);
    margin: var(--spacing-s, 1rem);

    /* Colors */
    color: var(--color-text-dark, #ffffff);
    background: var(--color-background-light, #1a1a24);

    /* Typography */
    font-size: var(--font-size-s, 0.875rem);
    font-weight: var(--font-weight-bold, 600);
}
```

**Benefits:**
- ✅ Automatic theme sync (light/dark mode)
- ✅ No JavaScript overhead
- ✅ Browser-native CSS variable resolution
- ✅ Better performance (no runtime calculations)
- ✅ DevTools CSS inspection works perfectly

**No TypeScript layer!** All styling is pure CSS. For rare JavaScript cases (dynamic calculations), use hardcoded values:

```typescript
// ✅ Acceptable - Rare edge case
const calculateHeight = (rows: number) => {
    const lineHeight = 20 // Hardcoded (only place that needs it)
    return `${lineHeight * rows}px`
}
```

### Design System = CSS Files

The design system **IS** the CSS files:
- `utilities.css` - Reusable patterns
- Component `.css` files - Component-specific styles
- Direct n8n CSS variable usage - Theme integration

**No intermediary TypeScript/JavaScript layer needed!**

## Result of tokens.ts Deletion

### Before
- **tokens.ts:** 260 lines
- **Usage:** Component inline styles
- **Overhead:** JavaScript object creation at runtime

### After
- **tokens.ts:** ❌ DELETED
- **Usage:** Pure CSS files
- **Overhead:** ✅ Zero

**Impact:**
- Build still works perfectly ✅
- No component changes needed ✅
- Simpler architecture ✅
- Better performance ✅

## Documentation Strategy

### Primary Documentation: CSS Files
CSS files **are** the design system for components:

```css
/* Button.css - This IS the design system documentation */
.button {
    /* Design tokens used */
    padding: var(--spacing-2xs, 0.5rem) var(--spacing-xs, 0.75rem);
    border-radius: var(--border-radius-base, 0.5rem);
    font-size: var(--font-size-s, 0.875rem);
}
```

### Secondary Documentation: Markdown Guides

**Token Reference:**
- [`DESIGN-TOKENS.md`](mdc:DESIGN-TOKENS.md) - Complete CSS variable reference

**Usage Guides:**
- [`0034-css-styling-patterns.mdc`](mdc:0034-css-styling-patterns.mdc) - CSS patterns and best practices
- [`UTILITY-CSS-GUIDE.md`](mdc:UTILITY-CSS-GUIDE.md) - Utility class usage
- [`CSS-DEDUPLICATION-EXPLAINED.md`](mdc:CSS-DEDUPLICATION-EXPLAINED.md) - How Vite bundles CSS

## Migration Impact

### No Component Changes Needed ✅
All components already use CSS classes:
```typescript
// ✅ Already migrated - no changes needed
import './Button.css'
export default function Button() {
    return <button className="button button--primary">Click</button>
}
```

### tokens.ts Completely Removed
```typescript
// BEFORE: 260 lines with componentTokens
export const componentTokens = { /* 50+ lines */ }
export const colors = { /* ... */ }
export const spacing = { /* ... */ }
// ... etc

// AFTER: ❌ FILE DELETED
// All styling now done directly in CSS files
// No TypeScript/JavaScript intermediary layer
```

## Design System Architecture

### Visual Overview
```
┌─────────────────────────────────────────────┐
│          n8n Design System (Host)           │
│                                             │
│  CSS Variables: --color-*, --spacing-*, etc│
└─────────────────┬───────────────────────────┘
                  │ Inherits at runtime
                  ▼
┌─────────────────────────────────────────────┐
│      Extension Design System (Pure CSS)     │
│                                             │
│  ├── utilities.css (reusable patterns)      │
│  └── Component CSS files (14 files)         │
│                                             │
│  Direct CSS variable usage with fallbacks:  │
│  var(--color-primary, #ff6d5a)              │
│                                             │
│  Browser-native resolution (zero JS!)       │
└─────────────────────────────────────────────┘
```

### Data Flow
1. **n8n** defines CSS variables on `document.documentElement`
2. **Extension CSS** uses those variables with fallbacks
3. **Extension components** apply CSS classes via `className`
4. **Browser** resolves CSS variables at runtime
5. **No JavaScript** involved in styling!

## Benefits of This Architecture

### Performance
- ✅ **Zero JavaScript overhead** for styling
- ✅ **Browser-native** CSS variable resolution
- ✅ **No runtime style calculations**
- ✅ **Smaller JS bundle** (no style objects in JS)

### Developer Experience
- ✅ **CSS DevTools work perfectly** - inspect and modify styles in browser
- ✅ **Familiar CSS patterns** - standard CSS, not CSS-in-JS
- ✅ **TypeScript autocompletion** for rare JS usage
- ✅ **Clear separation** - CSS for styling, JS for logic

### Maintainability
- ✅ **Single source of truth** - CSS files define component styles
- ✅ **Easy to modify** - change CSS without touching JS
- ✅ **Automatic theme sync** - CSS variables update on theme change
- ✅ **No duplication** - Don't maintain both JS and CSS versions

### Integration
- ✅ **Seamless n8n integration** - uses their CSS variables directly
- ✅ **Future-proof** - adapts to n8n design system updates
- ✅ **Theme compatible** - works with light/dark/custom themes
- ✅ **No runtime discovery** - direct variable usage with fallbacks

## Implementation Checklist

### Immediate Actions
- [x] Document design system architecture (this document)
- [x] Delete `tokens.ts` - completely unused after CSS refactoring
- [x] Update DESIGN-TOKENS.md to reflect CSS-first approach
- [x] Create utilities.css for reusable patterns

### Documentation Updates
- [x] Create CSS styling patterns guide ([0034](mdc:0034-css-styling-patterns.mdc))
- [x] Update React component standards ([0029](mdc:0029-n8n-extension-react-component-standards.mdc))
- [ ] Update design token integration guide ([0010](mdc:0010-styling-and-design-tokens.mdc))
- [ ] Update design integration guide ([0009](mdc:0009-n8n-design-integration.mdc))

### Future Considerations
- **Token validation** - Script to verify CSS variables match n8n's
- **Token documentation** - Generate docs from n8n's CSS variables
- **Design system playground** - Visual component documentation
- **Theme testing** - Automated visual regression for light/dark themes

## Related Documents
- [CSS Styling Patterns](mdc:0034-css-styling-patterns.mdc) - Complete CSS guide
- [React Component Standards](mdc:0029-n8n-extension-react-component-standards.mdc) - Component patterns
- [Design Token Integration](mdc:0010-styling-and-design-tokens.mdc) - Token strategy (needs update)
- [n8n Design Integration](mdc:0009-n8n-design-integration.mdc) - Integration approach (needs update)
- [CSS Refactoring Summary](mdc:../../../CSS-REFACTORING-SUMMARY.md) - Refactoring metrics

## Summary

Our CSS refactoring revealed that **CSS is the design system**. The TypeScript `tokens.ts` file should serve as **documentation and edge-case support**, not as the primary styling mechanism.

**Key Insight:** By moving to CSS-first, we achieved:
- ✅ Better performance (no JS overhead)
- ✅ Better DX (CSS DevTools work)
- ✅ Better architecture (separation of concerns)
- ✅ Better integration (native CSS variables)

The design system **evolved naturally** from inline-style-focused to CSS-focused, and our token architecture should reflect that reality.
