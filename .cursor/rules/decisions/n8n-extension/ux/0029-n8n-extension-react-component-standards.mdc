---
alwaysApply: false
description: React component standardsâ€”props, composition, testing, and accessibility basics.
---

# Decision Record: n8n Extension React Component Standards

## Goal
Establish React component standards and patterns specifically for the n8n extension, focusing on component structure, state management, and styling approaches.

## React Standards for n8n Extension
- **ALWAYS use React components** - Never use vanilla JavaScript DOM manipulation
- **Use functional components** with hooks (`useState`, `useEffect`, etc.)
- **Use TypeScript interfaces** for all props and state
- **Use CSS files for styling** - Co-locate `.css` files next to components; use CSS classes via `className`
- **Use React event handlers** (`onClick`, `onChange`, `onKeyPress`, etc.)

## Component Structure Pattern
```typescript
// Component.tsx
import React from 'react'
import './Component.css'

interface ComponentProps {
    // Define all props with types
}

function Component({ prop1, prop2 }: ComponentProps): React.JSX.Element {
    const [state, setState] = React.useState<Type>(initialValue);

    React.useEffect(() => {
        // Effect logic
        return () => {
            // Cleanup
        };
    }, [dependencies]);

    return (
        <div className="component">
            {/* JSX content */}
        </div>
    );
}

export default Component

// Component.css
.component {
    padding: var(--spacing-xs, 0.75rem);
    background: var(--color-background-base, #2d2e3a);
    color: var(--color-text-dark, #ffffff);
}
```

## State Management Strategy
- Use `React.useState` for local component state
- Use `React.useEffect` for side effects and lifecycle
- Pass state up via props, not down via context (keep it simple)
- Use proper TypeScript types for all state

## Event Handling Patterns
- Use React event handlers: `onClick`, `onChange`, `onKeyPress`
- Use proper TypeScript event types: `React.KeyboardEvent`, `React.MouseEvent`
- Prevent default behavior when needed: `e.preventDefault()`

## Styling Approach
- **CSS files co-located with components** - Create `.css` file next to each `.tsx` file
- **Use CSS classes** - Apply styles via `className` prop, not inline styles
- **Design tokens with fallbacks** - Use n8n's CSS variables: `var(--token, fallback)`
- **Shared CSS files** - Create shared CSS for common components (e.g., `FormElements.css`)
- **Only dynamic styles inline** - Use `style` prop only for runtime-calculated values
- Keep components presentational; avoid mixing logic and styles with platform calls

### CSS Best Practices
- Use BEM-like naming: `.component-name`, `.component-name__element`, `.component-name--modifier`
- Co-locate CSS files with components for maintainability
- Use n8n's design tokens for consistency with the host application
- Group related components' styles in shared CSS files when appropriate

### When Inline Styles Are Acceptable
- **Dynamic positioning**: Values that change based on user drag/resize
- **Calculated dimensions**: Runtime-computed heights, widths
- **Forwarded props**: Spreading `...props.style` for component flexibility
- **Temporary/Prototype code**: Quick tests (refactor to CSS afterward)

## Component Roles
- **Presentational Components**: Render-only; no side effects
- **Containers**: Bind services/state to presentational components
- **Services**: Platform/API/messaging wrappers (no DOM/React)

## File Extensions
- Use `.tsx` for React components
- Use `.ts` for TypeScript utilities and services
- Update [vite.config.ts](mdc:vite.config.ts) when adding new entry points

## n8n Extension Specific Considerations
- **Component integration** with n8n's existing UI elements
- **Event handling** that doesn't interfere with n8n's workflow editor
- **Styling** that matches n8n's design system
- **State management** that works within the extension's architecture

## Why This Approach
- **Consistency** with React ecosystem and patterns
- **Type safety** with TypeScript integration
- **Maintainability** through component-based architecture
- **Performance** through React's optimization strategies
- **Integration** with n8n's existing interface and functionality
