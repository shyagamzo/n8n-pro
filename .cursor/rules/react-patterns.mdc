---
globs: *.tsx,*.ts
description: React and TypeScript coding patterns and standards
---

# React & TypeScript Patterns

## React Standards
- **ALWAYS use React components** - Never use vanilla JavaScript DOM manipulation
- **Use functional components** with hooks (`useState`, `useEffect`, etc.)
- **Use TypeScript interfaces** for all props and state
- **Use inline styles** for component styling (no CSS files for components)
- **Use React event handlers** (`onClick`, `onChange`, `onKeyPress`, etc.)

## Component Structure
```typescript
interface ComponentProps {
    // Define all props with types
}

function Component({ prop1, prop2 }: ComponentProps): React.JSX.Element {
    const [state, setState] = React.useState<Type>(initialValue);
    
    React.useEffect(() => {
        // Effect logic
        return () => {
            // Cleanup
        };
    }, [dependencies]);
    
    return (
        <div style={{ /* inline styles */ }}>
            {/* JSX content */}
        </div>
    );
}
```

## State Management
- Use `React.useState` for local component state
- Use `React.useEffect` for side effects and lifecycle
- Pass state up via props, not down via context (keep it simple)
- Use proper TypeScript types for all state

## Event Handling
- Use React event handlers: `onClick`, `onChange`, `onKeyPress`
- Use proper TypeScript event types: `React.KeyboardEvent`, `React.MouseEvent`
- Prevent default behavior when needed: `e.preventDefault()`

## Styling
- Use inline styles with React state for dynamic styling
- Use CSS properties in camelCase: `backgroundColor`, `fontSize`
- Use template literals for conditional styles
- Keep styles close to components

## File Extensions
- Use `.tsx` for React components
- Use `.ts` for TypeScript utilities and services
- Update [vite.config.ts](mdc:vite.config.ts) when adding new entry points