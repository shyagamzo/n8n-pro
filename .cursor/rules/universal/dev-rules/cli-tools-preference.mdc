---
alwaysApply: true
description: Prevents writing files that can be generated using CLI tools or IDE features
---

# Use CLI Tools and IDE Features Instead of Manual Files

**Core Principle**: Always check if there's a CLI tool or IDE feature available before manually writing files. Never write files that can be generated using CLI tools or IDE features.

## Why Use Tools Instead of Manual Creation:
Using CLI tools and generators avoids unnecessary problems because:
- **Tested configurations**: Generated code follows established patterns and best practices
- **Proven structure**: Project scaffolding is battle-tested by the community
- **Automatic updates**: Tools stay current with framework changes and security patches
- **Reduced errors**: Eliminates manual mistakes in boilerplate and configuration
- **Consistency**: Ensures standard project structure across team members
- **Time savings**: Avoids reinventing the wheel for common setup tasks

## Universal Rule:
Before creating any file or project, ask: "Is there a CLI tool or IDE feature that can generate this?" If yes, use it.

## Project Generation:
When starting a new project from scratch, always check for:
- **Project generators**: `create-react-app`, `vue create`, `ng new`, `rails new`, etc.
- **Template repositories**: GitHub templates, starter kits, boilerplates
- **IDE project wizards**: New project templates in your IDE
- **Framework CLI tools**: Most frameworks provide project scaffolding

## How to Discover Tools:

### CLI Tools:
- Check documentation for generators and project creators
- Look for `--help` or `--init` flags
- Search for "generator", "scaffold", or "create" features
- Check package.json scripts for project setup commands
- Use framework generators (Angular CLI, React generators, Vue CLI, etc.)
- Look for project templates: `create-*`, `*-starter`, `*-template`

### IDE Features:
- Command Palette: search "generate", "create", "scaffold"
- Right-click context menus for "Generate" options
- File templates and snippets
- Framework-specific extensions
- DevContainer features
- Settings UI instead of manual JSON/XML

## What NOT to Write Manually:

‚ùå **Any file or project with a CLI generator or IDE feature**:
- **Entire projects**: Use project generators instead of creating from scratch
- Configuration files (use IDE settings UI)
- Build artifacts and compiled outputs
- Package manager files (lock files, node_modules)
- Framework files (components, services, models, controllers, routes)
- Generated boilerplate (tests, migrations, schemas, interfaces)
- DevContainer configs, IDE settings, launch configurations
- Project structure and initial setup files

## Decision Process:
1. **MANDATORY FIRST STEP**: Ask: "Is there a CLI tool or IDE feature for this?"
2. **SEARCH BEFORE CREATING**: Use `npm search`, `yarn search`, or web search to find generators
3. **CHECK DOCUMENTATION**: Look for official project generators and templates
4. **VERIFY TOOL EXISTS**: Confirm the tool works before proceeding
5. **USE THE TOOL**: If exists, use it instead of manual creation
6. **ONLY THEN**: If no tool exists, then write manually

## CRITICAL SAFEGUARDS:
- **STOP IMMEDIATELY** if rule violation is pointed out
- **ACKNOWLEDGE THE MISTAKE** before continuing
- **SEARCH FOR TOOLS** before any manual file creation
- **NO EXCEPTIONS** for common project types (React, Vue, Node, extensions, etc.)

## Common Project Types - ALWAYS Use CLI Tools:
- **Browser Extensions**: `create-crxjs`, `@crxjs/vite-plugin`, `web-ext`
- **React Apps**: `create-react-app`, `vite`, `next.js`
- **Node.js**: `npm init`, `yarn create`
- **TypeScript**: `tsc --init`, `@typescript-eslint/parser`
- **Vite Projects**: `npm create vite@latest`
- **Chrome Extensions**: `create-crxjs`, `@crxjs/vite-plugin`

## Browser Extension Development - MANDATORY CLI Usage:
**NEVER manually create these files for browser extensions:**
- `package.json` - Use `npm init` or project generators
- `tsconfig.json` - Use `tsc --init` or generated by CLI tools
- `vite.config.ts` - Use `@crxjs/vite-plugin` or similar
- `manifest.json` - Use CLI tools that generate proper structure
- Project structure - Use `create-crxjs` or similar generators

**Required CLI Tools for Browser Extensions:**
- `create-crxjs` - Complete project scaffolding
- `@crxjs/vite-plugin` - Vite integration for extensions
- `web-ext` - Firefox extension development
- `@types/chrome` - TypeScript definitions

## Exception:
Only write manually when:
- No CLI tool or IDE feature exists for the specific use case
- Customization needed beyond what tools support
- Educational documentation or examples
- Project-specific business logic that cannot be generated